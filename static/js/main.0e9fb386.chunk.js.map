{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getTitleData","a","fetch","response","json","App","useState","titleData","setTitleData","title","rating","release","current","setCurrent","useEffect","then","handleClick","length","randomTitle","Math","floor","random","rt_score","release_date","error","console","log","className","type","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAKMA,EAAY,uCAAG,8BAAAC,EAAA,sEACIC,MAHb,yCAES,cACbC,EADa,gBAEAA,EAASC,OAFT,cAEbA,EAFa,yBAGZA,GAHY,2CAAH,qDA2DHC,EAtDH,WAAO,IAAD,EACUC,mBAAS,IADnB,gCAEYA,mBAAS,KAFrB,gCAGcA,mBAAS,KAHvB,gCAIkBA,mBAAS,KAJ3B,mBAITC,EAJS,KAIEC,EAJF,OAKcF,mBAAS,CACrCG,MAAO,GACPC,OAAQ,GACRC,QAAS,KARK,mBAKTC,EALS,KAKAC,EALA,KAWhBC,qBAAU,WACRd,IAAee,KAAKP,KACnB,IAEH,IAAMQ,EAAW,uCAAG,oCAAAf,EAAA,sDAClB,IACMM,EAAUU,OAAS,IACjBC,EAAsBC,KAAKC,MAAMD,KAAKE,SAAWd,EAAUU,QADvC,EAEkBV,EAAUW,GAA5CT,EAFgB,EAEhBA,MAAOa,EAFS,EAETA,SAAUC,EAFD,EAECA,aACzBV,EAAW,CAAEJ,MAAOA,EAAOC,OAAQY,EAAUX,QAASY,KAExD,MAAOC,GACPC,QAAQC,IAAI,QAASF,GARL,2CAAH,qDAYjB,OACE,qBAAKG,UAAU,cAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,sEACA,6BAAKf,EAAQH,QACb,4BAC8B,IAAzBG,EAAQH,MAAMQ,OAAhB,0BAAmDL,EAAQD,QAA3D,yBAAmFC,EAAQF,QAAU,4CAGxG,uBAIA,wBACEkB,KAAK,SACLD,UAAU,kBACVE,QAASb,EAHX,6BCrCKc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0e9fb386.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n// import Button from \"./components/CustomButtonComponent\";\r\nconst url = \"https://lit-wave-20923.herokuapp.com/\";\r\n\r\nconst getTitleData = async () => {\r\n  const response = await fetch(url);\r\n  const json = await response.json();\r\n  return json;\r\n};\r\nconst App = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [rating, setRating] = useState(\"\");\r\n  const [release, setRelease] = useState(\"\");\r\n  const [titleData, setTitleData] = useState([]);\r\n  const [current, setCurrent] = useState({\r\n    title: \"\",\r\n    rating: \"\",\r\n    release: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    getTitleData().then(setTitleData);\r\n  }, []);\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      if (titleData.length > 0) {\r\n        let randomTitle: number = Math.floor(Math.random() * titleData.length);\r\n        const { title, rt_score, release_date } = titleData[randomTitle];\r\n        setCurrent({ title: title, rating: rt_score, release: release_date });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"application\">\r\n      <div className=\"homepage-bgimage\">\r\n        <div className=\"centered\">\r\n          <h1>Stuido Ghibli Films Random Generator</h1>\r\n          <h3>{current.title}</h3>\r\n          <p>\r\n            {!(current.title.length === 0) ? `was released in ${current.release} and scored a ${current.rating}`: \"Click the button to get a random title!\"}\r\n          </p>\r\n          {/* {titleData.length > 0 ? titleData.map((title)=><li><pre>{JSON.stringify(title, null, 2)}</pre></li>) :\"\"} */}\r\n          <br/>\r\n          {/* <p>Title: {title}</p>\r\n          <p>Rating: {rating}</p>\r\n          <p>Year Released: {release}</p> */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={handleClick}\r\n          >\r\n            Primary\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}